{"version":3,"sources":["state/index.tsx","components/admin/authProvider.tsx","pages/Home/index.tsx","pages/Login/loginPage.tsx","pages/App.tsx","index.tsx"],"names":["initStore","authProvider","dataProvider","history","reducer","combineReducers","admin","adminReducer","router","connectRouter","saga","rootSaga","all","adminSaga","map","fork","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","store","createStore","state","action","type","USER_LOGOUT","undefined","applyMiddleware","routerMiddleware","run","login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","Home","to","LoginPage","props","Login","backgroundImage","jsonServerProvider","createHashHistory","App","basename","process","exact","path","Admin","loginPage","title","Resource","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAyDeA,EAnDG,SAAC,GAIR,IAHPC,EAGM,EAHNA,aACAC,EAEM,EAFNA,aACAC,EACM,EADNA,QAGMC,EAAUC,YAAgB,CAC5BC,MAAOC,IACPC,OAAQC,YAAcN,KAMpBO,EAAI,UAAG,SAAUC,IAAV,iEACT,OADS,SACHC,YACF,CACIC,YAAUX,EAAcD,IAE1Ba,IAAIC,MALD,oCAAUJ,MAQjBK,EAAiBC,cAEjBC,EAQFC,IAEEC,EAAQC,aAvBe,SAACC,EAAOC,GAAR,OACzBnB,EAAQmB,EAAOC,OAASC,IAAcH,OAAQI,EAAWH,KAwBzD,GACAL,EACIS,YACIX,EACAY,YAAiBzB,MAQ7B,OADAa,EAAea,IAAInB,GACZU,G,SCxBInB,EA9BM,CAEjB6B,MAAO,YAAmB,IAAhBC,EAAe,EAAfA,SAGN,OAFAC,aAAaC,QAAQ,WAAYF,GAE1BG,QAAQC,WAGnBC,OAAQ,WAEJ,OADAJ,aAAaK,WAAW,YACjBH,QAAQC,WAGnBG,WAAY,YAAiB,IAAdC,EAAa,EAAbA,OACX,OAAe,MAAXA,GAA6B,MAAXA,GAClBP,aAAaK,WAAW,YACjBH,QAAQM,UAEZN,QAAQC,WAGnBM,UAAW,WACP,OAAOT,aAAaU,QAAQ,YACtBR,QAAQC,UACRD,QAAQM,UAGlBG,eAAgB,kBAAMT,QAAQC,Y,QCfnBS,EATQ,WACnB,OACI,gCACI,0FACA,cAAC,IAAD,CAASC,GAAG,SAAZ,kC,iBCAGC,EAJG,SAAAC,GACd,OAAO,cAACC,EAAA,EAAD,2BAAWD,GAAX,IAAkBE,gBAAgB,0DCavC/C,EAAegD,YAAmB,wCAClC/C,EAAUgD,cAuCDC,MArCf,WACE,OACE,cAAC,IAAD,CAAUhC,MAAOpB,EAAU,CACvBC,eACAC,eACAC,YAHJ,SAMI,cAAC,IAAD,CAAQkD,SAAUC,YAAlB,SACE,eAAC,IAAD,WAEE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAACC,EAAA,EAAD,CACEC,UAAWZ,EAEX7C,aAAcA,EACdC,aAAcA,EACdC,QAASA,EACTwD,MAAM,oBANR,SASE,cAACC,EAAA,EAAD,CAAUC,KAAK,gCCzC/BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a3cc4500.chunk.js","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport { routerMiddleware, connectRouter } from 'connected-react-router';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { all, fork } from 'redux-saga/effects';\r\nimport { adminReducer, adminSaga, USER_LOGOUT} from 'react-admin';\r\n\r\nconst initStore = ({\r\n    authProvider,\r\n    dataProvider,\r\n    history,\r\n    }) => {\r\n\r\n    const reducer = combineReducers({\r\n        admin: adminReducer,\r\n        router: connectRouter(history),\r\n        // add your own reducers here\r\n    });\r\n    const resettableAppReducer = (state, action) =>\r\n        reducer(action.type !== USER_LOGOUT ? state : undefined, action);\r\n\r\n    const saga = function* rootSaga() {\r\n        yield all(\r\n            [\r\n                adminSaga(dataProvider, authProvider),\r\n                // add your own sagas here\r\n            ].map(fork)\r\n        );\r\n    };\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    const composeEnhancers =\r\n        (process.env.NODE_ENV === 'development' &&\r\n            typeof window !== 'undefined' &&\r\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n                trace: true,\r\n                traceLimit: 25,\r\n            })) ||\r\n        compose;\r\n\r\n    const store = createStore(\r\n        resettableAppReducer,\r\n        { /* set your initial state here */ },\r\n        composeEnhancers(\r\n            applyMiddleware(\r\n                sagaMiddleware,\r\n                routerMiddleware(history),\r\n                // add your own middlewares here\r\n            ),\r\n            // add your own enhancers here\r\n        ),        \r\n    );\r\n\r\n    sagaMiddleware.run(saga);\r\n    return store;\r\n};\r\n\r\nexport default initStore;","const authProvider = {\n    // called when the user attempts to log in\n    login: ({ username }) => {\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => Promise.resolve(),\n};\n\nexport default authProvider;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Home: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <div>Front Page Blah Blah. Pls wait while devs do something.</div>\r\n            <NavLink to=\"/admin\">Go to Admin Page</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport { Login } from 'react-admin';\n\nconst LoginPage = props => {\n    return <Login {...props} backgroundImage=\"https://source.unsplash.com/random/1600x900/?crypto\" />\n};\n\nexport default LoginPage;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createHashHistory } from 'history';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport {Admin, Resource} from 'react-admin';\nimport initStore from '../state';\n//import { googleAPIAuthProvider, googleSheetsDataProvider } from 'ra-data-google-sheets';\nimport jsonServerProvider from 'ra-data-json-server';\nimport authProvider from '../components/admin/authProvider';\n\nimport Home from './Home';\nimport LoginPage from './Login/loginPage';\n\n//import CryptoEntities, {CryptoECreate, CryptoEEdit} from '../components/admin/cryptoentities';\n// const dataProvider = googleSheetsDataProvider(\"1ZoxqPw-JVqWes54FHlTCiXN7sHebiu_2_cdMgzh2lqg\");\n// const authProvider = googleAPIAuthProvider();\n\nconst dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\nconst history = createHashHistory();\n\nfunction App() {\n  return (\n    <Provider store={initStore({\n        authProvider,\n        dataProvider,\n        history,\n      })}>\n\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n\n            <Route path=\"/admin\">\n              <Admin \n                loginPage={LoginPage} \n\n                authProvider={authProvider} \n                dataProvider={dataProvider} \n                history={history}\n                title=\"Crypto Dash Admin\"\n                >\n\n                <Resource name='crypto-entities'\n                  />\n              </Admin>\n            </Route>\n\n          </Switch>\n        </Router>\n\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}